export const initialState = {
  assets: [
    {
      id: "1c894b8e-8978-464e-a120-141c9a33601e",
      type: "video",
      url: "https://reel-ai-assets.s3.us-west-2.amazonaws.com/29a02986-d1be-40a9-849f-94a9a70072ff%2Fvideo%2F01JV2Q3VMSGQF3PNR4HXRHVK9S-landing-page-showcase.mp4",
      description: "Landing Page Showcase.mp4",
      gsUri:
        "https://reel-ai-assets.s3.us-west-2.amazonaws.com/29a02986-d1be-40a9-849f-94a9a70072ff%2Fvideo%2F01JV2Q3VMSGQF3PNR4HXRHVK9S-landing-page-showcase.mp4",
      metadata: {
        size: 0,
        originalPickerName: "Landing Page Showcase.mp4",
      },
    },
    // {
    //   id: "1c894b8e-8978-464e-a120-141c9a33601z",
    //   type: "image",
    //   description: "Background Image",
    //   gsUri:
    //     "https://storage.googleapis.com/revideo-assets/hero-image-dark.jpg",
    //   metadata: {
    //     size: 0,
    //     originalPickerName: "Mixio Pro Wallpaper or Background Image",
    //   },
    //   url: "https://storage.googleapis.com/revideo-assets/hero-image-dark.jpg",
    // },
    {
      id: "754055c4-2afc-433f-93d9-508e2987b1f9",
      type: "audio",
      url: "https://reel-ai-assets.s3.us-west-2.amazonaws.com/29a02986-d1be-40a9-849f-94a9a70072ff%2Faudio%2F01JTW70TCQHP7VRK2V3GRVE7QQ-dark-mystery-trailer-taking-our-time-131566.mp3",
      description: "dark-mystery-trailer-taking-our-time-131566.mp3",
      gsUri:
        "https://reel-ai-assets.s3.us-west-2.amazonaws.com/29a02986-d1be-40a9-849f-94a9a70072ff%2Faudio%2F01JTW70TCQHP7VRK2V3GRVE7QQ-dark-mystery-trailer-taking-our-time-131566.mp3",
      metadata: {
        size: 0,
        originalPickerName: "dark-mystery-trailer-taking-our-time-131566.mp3",
      },
    },
    {
      id: "ef5d95c1-68ec-4c24-9020-3eafcd7b5984",
      type: "video",
      url: "https://reel-ai-assets.s3.us-west-2.amazonaws.com/29a02986-d1be-40a9-849f-94a9a70072ff%2Fvideo%2F01JTW68GXE4XCSK50YQVGGHTY9-image-generation-demo.mp4",
      description: "image-generation-demo.mp4",
      gsUri:
        "https://reel-ai-assets.s3.us-west-2.amazonaws.com/29a02986-d1be-40a9-849f-94a9a70072ff%2Fvideo%2F01JTW68GXE4XCSK50YQVGGHTY9-image-generation-demo.mp4",
      metadata: {
        size: 0,
        originalPickerName: "image-generation-demo.mp4",
      },
    },
    // {
    //   id: "0832e6f4-ad08-406a-b78a-ffee4dce86ca",
    //   type: "video",
    //   url: "https://reel-ai-assets.s3.us-west-2.amazonaws.com/29a02986-d1be-40a9-849f-94a9a70072ff%2Fvideo%2F01JTW634W3CPPE1WPN5FN8WY79-revideo-demo.mp4",
    //   description: "revideo-demo.mp4",
    //   gsUri:
    //     "https://reel-ai-assets.s3.us-west-2.amazonaws.com/29a02986-d1be-40a9-849f-94a9a70072ff%2Fvideo%2F01JTW634W3CPPE1WPN5FN8WY79-revideo-demo.mp4",
    //   metadata: {
    //     size: 0,
    //     originalPickerName: "revideo-demo.mp4",
    //   },
    // },
    {
      id: "91dbfa02-e06e-4c38-9d5d-240e8086fb34",
      type: "video",
      url: "https://reel-ai-assets.s3.us-west-2.amazonaws.com/29a02986-d1be-40a9-849f-94a9a70072ff%2Fvideo%2F01JTW62DJ61W264ZPDFNW8HVFA-planner-result.mp4",
      description: "planner-result.mp4",
      gsUri:
        "https://reel-ai-assets.s3.us-west-2.amazonaws.com/29a02986-d1be-40a9-849f-94a9a70072ff%2Fvideo%2F01JTW62DJ61W264ZPDFNW8HVFA-planner-result.mp4",
      metadata: {
        size: 0,
        originalPickerName: "planner-result.mp4",
      },
    },
    {
      id: "cf86e82b-0722-4bf4-9d64-7caaea3f7a6d",
      type: "video",
      url: "https://reel-ai-assets.s3.us-west-2.amazonaws.com/29a02986-d1be-40a9-849f-94a9a70072ff%2Fvideo%2F01JTW620Q507XTB3P74ZJ9Z581-image-video-generation-outputs.mp4",
      description: "image-video-generation-outputs.mp4",
      gsUri:
        "https://reel-ai-assets.s3.us-west-2.amazonaws.com/29a02986-d1be-40a9-849f-94a9a70072ff%2Fvideo%2F01JTW620Q507XTB3P74ZJ9Z581-image-video-generation-outputs.mp4",
      metadata: {
        size: 0,
        originalPickerName: "image-video-generation-outputs.mp4",
      },
    },
    {
      id: "8b415b88-c4af-4afb-8ba7-d28163d724aa",
      type: "image",
      url: "https://reel-ai-assets.s3.us-west-2.amazonaws.com/29a02986-d1be-40a9-849f-94a9a70072ff%2Fimage%2F01JR8AWWC9M3Y4T7DRGSQFF14E-mixio-pro-logo-removebg-preview.png",
      description: "mixio-pro-logo-removebg-preview.png",
      gsUri:
        "https://reel-ai-assets.s3.us-west-2.amazonaws.com/29a02986-d1be-40a9-849f-94a9a70072ff%2Fimage%2F01JR8AWWC9M3Y4T7DRGSQFF14E-mixio-pro-logo-removebg-preview.png",
      metadata: {
        size: 97174,
        originalPickerName: "mixio-pro-logo-removebg-preview.png",
      },
    },
  ],
  prompt:
    "Objective: Help me create a Product Demo for Mixio Pro. First Create the Plan. In general Start by an Intro Screen for the Mixio Followed by the Image Generation Clip. Only keep necessary part. Use different playback speed for different sections. Ad a Section Screen in between before switching to a different feature demo. We showcase 4 things, First Landing page with Some sample generations in the carousel. followed by the Image generation, then show the content Planner followed by the Video generation using the Text prompt and the Fast iteration.  DO NOT ADD UNSPLASH IMAGE. ONLY USE THE GIVEN or PROVIDED ASSETS. DO NOT hallucinate Assets from unsplash or pexels if not given. \n\nAwesome. This is scene code is looking good, but its very short. The clips in between are too short to even understand the feature. Keep all the important parts, use appropriate Playback. The total Video Duration should be around 2 minutes currently its around 47 seconds So we can have bigger video clips in between. \n\nUse the new logo provided. Also the Audio should not change. It feels like you are also seeking or skiping audio. Keep the constant Audio. \n\nIn this version The Individual feature demos should also be clipped, Remove the unnecessary waiting or Increase the Playback when there is waiting, and its important for each feature to showcase the start and the final outcome of the feature. Also time it appropriately with the bg music\n\n\nTHE IMAGE GENERATION FEATURE DEMO CLIP Should be SPLIT INTO 3 parts In the First part, the navigation by selecting the category and then movin to the Generation Interface, Second part -> Adding Image Generation Text Prompt, setting product and so on. Third -> Output\n\nThe Three parts should not have transitions between them. Also the Image Generation Demo is more than 2 minutes long. Find appropriate sections from the demo to clip them properly. ",

  // starter_code:
  // '/** @jsxImportSource @revideo/2d/lib */ import { Audio, blur, Img, Layout, makeScene2D, Node, Rect, Txt, Video, } from "@revideo/2d"; import { all, createRef, delay, easeOutCubic, easeOutExpo, map, Reference, tween, useScene, useTime, waitFor, } from "@revideo/core"; // --- Configuration Interfaces --- interface GeneralAssetConfig { logo?: string; backgroundMusic?: string; videos?: { [key: string]: string }; images?: { [key: string]: string }; // Allow arbitrary keys for other asset types if needed [key: string]: any; } interface GeneralSceneItem { id: string; // Unique ID for the scene type: "intro" | "title_card" | "video_clip" | "outro"; duration: number; // Total duration this scene configuration should last in the timeline // For intro/outro titleText?: string; logoAssetKey?: string; // Key from GeneralAssetConfig (e.g., "logo" or "images.myCompanyLogo") // For title_card mainText?: string; subText?: string; // For video_clip videoAssetKey?: string; // Key from GeneralAssetConfig.videos videoStartTime?: number; // Time in seconds to start the video clip from its source videoPlayDuration?: number; // How long the video content itself should play on screen captionText?: string; // Common visual elements for the scene backgroundImageAssetKey?: string; // Key from GeneralAssetConfig.images for this scene"s background backgroundColor?: string; // Overrides global default background, or used if no image } interface GeneralProjectConfig { assets: GeneralAssetConfig; global: { defaultBackgroundColor?: string; musicVolume?: number; enableBlurredBackground?: boolean; // Master switch for the global blurred background globalBlurredAssetImageKey?: string; // Default image for global blur if scene doesn"t specify blurredBackgroundOpacity?: number; }; sceneSequence: GeneralSceneItem[]; } function seekTime(videoRef: Reference<Video>, time: number) { // Ensure time is not negative (videoRef() as any).time(Math.max(0, time)); } // --- Default Configuration (Placeholder - Customize this for your project) --- const defaultConfig: GeneralProjectConfig = { assets: { logo: "", backgroundMusic: "", videos: { sampleVideo1: "", sampleVideo2: "", }, images: { defaultBgGradient: "", mountainPeak: "", }, }, global: { defaultBackgroundColor: "#111827", // Dark fallback background musicVolume: 0.25, enableBlurredBackground: true, globalBlurredAssetImageKey: "images.defaultBgGradient", // Default blurred background blurredBackgroundOpacity: 0.25, }, sceneSequence: [ { id: "intro_scene", type: "intro", duration: 4, titleText: "My Awesome Video", logoAssetKey: "logo", backgroundImageAssetKey: "images.mountainPeak", // Specific blurred bg for intro }, { id: "title_card_1", type: "title_card", duration: 3.5, mainText: "Section One", subText: "An interesting point to discuss.", backgroundColor: "#2563EB", // Example: Blue background for this title card }, { id: "video_clip_1", type: "video_clip", duration: 7, videoAssetKey: "videos.sampleVideo1", videoStartTime: 1, // Start video at 1s videoPlayDuration: 5, // Play 5s of video content captionText: "Watch this cool sunset!", // Uses global blurred background by default if not specified here }, { id: "video_clip_2", type: "video_clip", duration: 7, videoAssetKey: "videos.sampleVideo2", videoStartTime: 0, videoPlayDuration: 5.5, captionText: "Beautiful ocean waves.", backgroundImageAssetKey: "images.defaultBgGradient", // Explicitly set a bg }, { id: "outro_scene", type: "outro", duration: 4, titleText: "Thanks for Watching!", logoAssetKey: "logo", // Uses global blurred background by default }, ], }; // --- Theme Hook --- function useTheme() { const scene = useScene(); // Allow overriding defaultConfig with scene variables const config = scene.variables.get<GeneralProjectConfig>( "config", defaultConfig )(); const size = scene.getSize(); const width = size.width; const height = size.height; const unit = width / 100; // 1 unit = 1% of scene width const font = { xs: unit * 2.5, sm: unit * 3, base: unit * 3.5, md: unit * 4.5, lg: unit * 6, xl: unit * 8, }; const colors = { white: "#ffffff", black: "#000000", primaryAccent: "#3B82F6", textDark: "#1F2937", textLight: "#F3F4F6", captionBackground: "rgba(0,0,0,0.65)", }; const animation = { fast: 0.3, medium: 0.5, slow: 0.7, defaultFadeIn: 0.5, defaultFadeOut: 0.5, defaultSlide: 0.6, }; const zIndex = { sceneBackground: -20, globalBlurredBackground: -10, video: 1, // Videos above backgrounds captionBg: 5, captionText: 10, mainContent: 15, // For titles, logos in intro/outro/title_cards overlay: 100, // For any potential top-level overlays }; return { width, height, unit, font, colors, animation, zIndex, projectConfig: config, }; } // --- Animation Helper --- function* slideIn( elementRef: Reference<Txt | Layout | Rect | Img>, duration: number, direction: "bottom" | "top" | "left" | "right", theme: ReturnType<typeof useTheme>, distanceMultiplier: number = 0.08 ) { if (!elementRef()) return; const initialPos = { x: elementRef().position.x(), y: elementRef().position.y(), }; const slideDistance = direction === "bottom" || direction === "top" ? theme.height * distanceMultiplier : theme.width * distanceMultiplier; elementRef().opacity(0); if (direction === "bottom") elementRef().position.y(initialPos.y + slideDistance); else if (direction === "top") elementRef().position.y(initialPos.y - slideDistance); else if (direction === "left") elementRef().position.x(initialPos.x - slideDistance); else if (direction === "right") elementRef().position.x(initialPos.x + slideDistance); yield* all( elementRef().opacity(1, duration, easeOutCubic), direction === "bottom" || direction === "top" ? elementRef().position.y(initialPos.y, duration, easeOutCubic) : elementRef().position.x(initialPos.x, duration, easeOutCubic) ); } // --- Asset URL Helper --- function getAssetUrl( keyOrPath: string | undefined, assets: GeneralAssetConfig ): string | undefined { if (!keyOrPath) return undefined; if (keyOrPath.startsWith("http://") || keyOrPath.startsWith("https://")) return keyOrPath; // Handles paths like "videos.sampleVideo1" or "logo" const pathParts = keyOrPath.split("."); let currentAsset: any = assets; for (const part of pathParts) { if ( currentAsset && typeof currentAsset === "object" && part in currentAsset ) { currentAsset = currentAsset[part]; } else { console.warn(`Asset not found for key/path: ${keyOrPath}`); return undefined; } } return typeof currentAsset === "string" ? currentAsset : undefined; } // --- Generic Scene Handlers --- function* handleIntroOutroScene( view: Node, sceneConfig: GeneralSceneItem, theme: ReturnType<typeof useTheme>, isIntro: boolean ) { const { projectConfig, animation, zIndex, font, colors, unit } = theme; const logoUrl = getAssetUrl(sceneConfig.logoAssetKey, projectConfig.assets); const elementsContainer = createRef<Layout>(); const logoRef = createRef<Img>(); const titleRef = createRef<Txt>(); view.add( <Layout ref={elementsContainer} opacity={0} layout direction="column" gap={unit * 2.5} alignItems="center" justifyContent="center" width={theme.width} height={theme.height} > {logoUrl && ( <Img ref={logoRef} src={logoUrl} width={unit * (isIntro ? 22 : 18)} height={null} // Maintain aspect ratio by setting height to null for auto-calculation zIndex={zIndex.mainContent} /> )} {sceneConfig.titleText && ( <Txt ref={titleRef} text={sceneConfig.titleText} fontSize={font.xl * (isIntro ? 1 : 0.9)} fontWeight={700} fill={colors.textLight} zIndex={zIndex.mainContent} textAlign="center" scale={isIntro ? 0.8 : 1} /> )} </Layout> ); const fadeInDuration = animation.slow; // Ensure holdDuration is not negative const holdDuration = Math.max(0.1, sceneConfig.duration - fadeInDuration * 2); const fadeOutDuration = animation.slow; yield* elementsContainer().opacity(1, fadeInDuration * 0.6); if (isIntro) { yield* all( logoRef()?.scale(1, fadeInDuration, easeOutExpo) ?? waitFor(0), titleRef()?.scale(1, fadeInDuration, easeOutExpo) ?? waitFor(0) ); } yield* waitFor(holdDuration); yield* elementsContainer().opacity(0, fadeOutDuration); elementsContainer().remove(); } function* handleTitleCardScene( view: Node, sceneConfig: GeneralSceneItem, theme: ReturnType<typeof useTheme> ) { const { animation, zIndex, font, colors, unit } = theme; const elementsContainer = createRef<Layout>(); const mainTextRef = createRef<Txt>(); const subTextRef = createRef<Txt>(); const sceneBackgroundRef = createRef<Rect>(); // For solid color background // Scene specific solid background color if (sceneConfig.backgroundColor) { view.add( <Rect ref={sceneBackgroundRef} width={theme.width} height={theme.height} fill={sceneConfig.backgroundColor} zIndex={theme.zIndex.sceneBackground} opacity={0} /> ); yield* sceneBackgroundRef().opacity(1, animation.fast); } view.add( <Layout ref={elementsContainer} opacity={0} layout direction="column" gap={unit * 1.5} alignItems="center" justifyContent="center" width={theme.width * 0.9} // Don"t make text full width height={theme.height} > {sceneConfig.mainText && ( <Txt ref={mainTextRef} text={sceneConfig.mainText} fontSize={font.lg} fontWeight={600} fill={colors.textLight} zIndex={zIndex.mainContent} textAlign="center" opacity={0} // For individual animation /> )} {sceneConfig.subText && ( <Txt ref={subTextRef} text={sceneConfig.subText} fontSize={font.md} fill={colors.textLight} opacity={0} // For individual animation zIndex={zIndex.mainContent} textAlign="center" lineHeight={font.md * 1.4} maxWidth={theme.width * 0.7} /> )} </Layout> ); const fadeInDuration = animation.medium; const holdDuration = Math.max( 0.1, sceneConfig.duration - fadeInDuration * 1.5 - animation.defaultSlide ); const fadeOutDuration = animation.medium; yield* elementsContainer().opacity(1, fadeInDuration * 0.5); // Fade in container first if (mainTextRef()) yield* slideIn(mainTextRef, animation.defaultSlide, "bottom", theme); if (subTextRef()) yield* delay( 0.15, slideIn(subTextRef, animation.defaultSlide, "bottom", theme) ); yield* waitFor(holdDuration); yield* elementsContainer().opacity(0, fadeOutDuration); if (sceneBackgroundRef()) { yield* sceneBackgroundRef().opacity(0, animation.fast); sceneBackgroundRef()?.remove(); } elementsContainer().remove(); } function* handleVideoClipScene( view: Node, sceneConfig: GeneralSceneItem, theme: ReturnType<typeof useTheme> ) { const { projectConfig, animation, zIndex, font, colors, unit, width, height, } = theme; const videoUrl = getAssetUrl(sceneConfig.videoAssetKey, projectConfig.assets); if (!videoUrl) { console.warn( `Video asset not found for key: ${sceneConfig.videoAssetKey}. Skipping scene ${sceneConfig.id}.` ); yield* waitFor(sceneConfig.duration); return; } const videoRef = createRef<Video>(); const captionLayoutRef = createRef<Layout>(); view.add( <Video ref={videoRef} src={videoUrl} width={width * 0.92} height={height * 0.88} radius={unit * 1.2} opacity={0} zIndex={zIndex.video} loop={false} volume={0} // Mute if background music is primary time={sceneConfig.videoStartTime ?? 0} /> ); if (sceneConfig.captionText) { view.add( <Rect ref={captionLayoutRef} opacity={0} zIndex={zIndex.captionBg} y={height * 0.35} // Position caption towards bottom fill={colors.captionBackground} padding={[unit * 1.2, unit * 2.2]} radius={unit * 0.7} layout > <Txt text={sceneConfig.captionText} fontSize={font.md * 0.9} fill={colors.textLight} textAlign="center" zIndex={zIndex.captionText} /> </Rect> ); } const videoFadeInDuration = animation.medium; const captionSlideInDuration = animation.defaultSlide; videoRef()?.play(); yield* all( videoRef().opacity(1, videoFadeInDuration), captionLayoutRef() ? slideIn(captionLayoutRef, captionSlideInDuration, "bottom", theme) : waitFor(0) ); const videoContentPlayTime = sceneConfig.videoPlayDuration ?? sceneConfig.duration - videoFadeInDuration - animation.defaultFadeOut; yield* waitFor(Math.max(0.1, videoContentPlayTime)); const videoFadeOutDuration = animation.defaultFadeOut; yield* all( videoRef().opacity(0, videoFadeOutDuration), captionLayoutRef() ? captionLayoutRef().opacity(0, videoFadeOutDuration) : waitFor(0) ); videoRef()?.pause(); const totalAnimatedTime = videoFadeInDuration + videoContentPlayTime + videoFadeOutDuration; const remainingSceneTime = sceneConfig.duration - totalAnimatedTime; if (remainingSceneTime > 0) yield* waitFor(remainingSceneTime); videoRef()?.remove(); captionLayoutRef()?.remove(); } // --- Main Scene Definition --- export default makeScene2D("GenericVideoSequenceTemplate", function* (view) { const theme = useTheme(); const { projectConfig, width, height, zIndex, animation } = theme; // --- Global Elements Setup --- const backgroundMusicRef = createRef<Audio>(); const globalBlurredBgRef = createRef<Img>(); // For the optional global blurred background const globalSolidBgRef = createRef<Rect>(); // For the fallback solid background const musicUrl = getAssetUrl( projectConfig.assets.backgroundMusic, projectConfig.assets ); if (musicUrl) { view.add( <Audio ref={backgroundMusicRef} src={musicUrl} play={true} loop={true} volume={projectConfig.global.musicVolume ?? 0.5} /> ); } // Setup global solid background (always there, but might be covered) view.add( <Rect ref={globalSolidBgRef} fill={projectConfig.global.defaultBackgroundColor ?? "#000000"} width={width} height={height} zIndex={zIndex.sceneBackground - 1} // Deepest background /> ); // Setup global blurred background if enabled const globalBlurredBgAssetUrl = getAssetUrl( projectConfig.global.globalBlurredAssetImageKey, projectConfig.assets ); if (projectConfig.global.enableBlurredBackground && globalBlurredBgAssetUrl) { view.add( <Img ref={globalBlurredBgRef} src={globalBlurredBgAssetUrl} // Initial source width={width} height={height} opacity={0} zIndex={zIndex.globalBlurredBackground} filters={[blur(18)]} alpha={projectConfig.global.blurredBackgroundOpacity ?? 0.3} /> ); } // --- Scene Loop --- for (const sceneConfig of projectConfig.sceneSequence) { const sceneIterationStartTime = useTime(); // Time at the start of this loop iteration let sceneSpecificSolidBgRef = createRef<Rect>(); // Determine background for the current scene const sceneBgImageKey = sceneConfig.backgroundImageAssetKey; const sceneBgImageUrl = getAssetUrl(sceneBgImageKey, projectConfig.assets); if (globalBlurredBgRef()) { // Manage global blurred background const showGlobalBlur = projectConfig.global.enableBlurredBackground && !sceneConfig.backgroundColor && !sceneBgImageUrl; const targetBlurUrl = sceneBgImageUrl || globalBlurredBgAssetUrl; // Prefer scene-specific image for blur if ( showGlobalBlur || (projectConfig.global.enableBlurredBackground && sceneBgImageUrl) ) { // Show global if enabled and no scene color, or if scene specifies image for global blur if (targetBlurUrl && globalBlurredBgRef().src() !== targetBlurUrl) { // If src changes, cross-fade if (globalBlurredBgRef().opacity() > 0) yield* globalBlurredBgRef().opacity(0, animation.fast / 2); globalBlurredBgRef().src(targetBlurUrl); yield* globalBlurredBgRef().opacity(1, animation.fast / 2); } else if (globalBlurredBgRef().opacity() === 0 && targetBlurUrl) { yield* globalBlurredBgRef().opacity(1, animation.medium); } } else { // Hide global blur if scene has solid color or global blur disabled if (globalBlurredBgRef().opacity() > 0) yield* globalBlurredBgRef().opacity(0, animation.fast); } } // Scene-specific solid background (if `backgroundColor` is set) if (sceneConfig.backgroundColor) { view.add( <Rect ref={sceneSpecificSolidBgRef} fill={sceneConfig.backgroundColor} width={width} height={height} opacity={0} zIndex={zIndex.sceneBackground} // Above global solid, below global blur /> ); yield* sceneSpecificSolidBgRef().opacity(1, animation.fast); } // Execute specific scene handler switch (sceneConfig.type) { case "intro": yield* handleIntroOutroScene(view, sceneConfig, theme, true); break; case "title_card": yield* handleTitleCardScene(view, sceneConfig, theme); break; case "video_clip": yield* handleVideoClipScene(view, sceneConfig, theme); break; case "outro": yield* handleIntroOutroScene(view, sceneConfig, theme, false); break; default: console.warn( `Unknown scene type: ${(sceneConfig as any).type}. Skipping.` ); yield* waitFor(sceneConfig.duration); // Still wait for its duration } // Ensure scene duration is met const sceneIterationEndTime = useTime(); const elapsedTimeInIteration = sceneIterationEndTime - sceneIterationStartTime; const remainingTimeForScene = sceneConfig.duration - elapsedTimeInIteration; if (remainingTimeForScene > 0) { yield* waitFor(remainingTimeForScene); } // Clean up scene-specific solid background if (sceneSpecificSolidBgRef()) { yield* sceneSpecificSolidBgRef().opacity(0, animation.fast); sceneSpecificSolidBgRef()?.remove(); } } // --- Final Fade Out of Global Elements --- if (backgroundMusicRef()) { const currentVolume = backgroundMusicRef()?.getVolume() ?? 0; yield* tween(animation.slow, (value) => { backgroundMusicRef()?.setVolume( map(currentVolume, 0, easeOutCubic(value)) ); }); backgroundMusicRef()?.pause(); } if (globalBlurredBgRef() && globalBlurredBgRef().opacity() > 0) { yield* globalBlurredBgRef().opacity(0, animation.medium); } // Global solid background can just stay or be faded if desired // yield* globalSolidBgRef().opacity(0, animation.slow); yield* waitFor(animation.medium); // Final pause before scene truly ends });',
  // starter_code:
  // '/* @jsxImportSource @revideo/2d/lib */\nimport { makeScene2D, Txt, Rect, Img, Video, Layout, Audio, Node, blur } from "@revideo/2d";\nimport { all, waitFor, createRef, useScene, sequence, chain, delay, Reference, easeOutCubic, easeOutExpo } from "@revideo/core";\n\nconst assets = {\n  logoAsset: \'https://reel-ai-assets.s3.us-west-2.amazonaws.com/29a02986-d1be-40a9-849f-94a9a70072ff%2Fimage%2F01JR8AWWC9M3Y4T7DRGSQFF14E-mixio-pro-logo-removebg-preview.png\',\n  landingPageVideoAsset: \'https://reel-ai-assets.s3.us-west-2.amazonaws.com/29a02986-d1be-40a9-849f-94a9a70072ff%2Fvideo%2F01JV2Q3VMSGQF3PNR4HXRHVK9S-landing-page-showcase.mp4\',\n  imageGenVideoAsset: \'https://reel-ai-assets.s3.us-west-2.amazonaws.com/29a02986-d1be-40a9-849f-94a9a70072ff%2Fvideo%2F01JTW68GXE4XCSK50YQVGGHTY9-image-generation-demo.mp4\',\n  plannerVideoAsset: \'https://reel-ai-assets.s3.us-west-2.amazonaws.com/29a02986-d1be-40a9-849f-94a9a70072ff%2Fvideo%2F01JTW62DJ61W264ZPDFNW8HVFA-planner-result.mp4\',\n  videoGenVideoAsset: \'https://reel-ai-assets.s3.us-west-2.amazonaws.com/29a02986-d1be-40a9-849f-94a9a70072ff%2Fvideo%2F01JTW620Q507XTB3P74ZJ9Z581-image-video-generation-outputs.mp4\',\n  revideoDemoAsset: \'https://reel-ai-assets.s3.us-west-2.amazonaws.com/29a02986-d1be-40a9-849f-94a9a70072ff%2Fvideo%2F01JTW634W3CPPE1WPN5FN8WY79-revideo-demo.mp4\',\n  backgroundMusicAsset: \'https://reel-ai-assets.s3.us-west-2.amazonaws.com/29a02986-d1be-40a9-849f-94a9a70072ff%2Faudio%2F01JTW70TCQHP7VRK2V3GRVE7QQ-dark-mystery-trailer-taking-our-time-131566.mp3\',\n};\n\nfunction useTheme() {\n  const scene = useScene();\n  const size = scene.getSize();\n  const width = size.width;\n  const height = size.height;\n  const unit = width / 100;\n\n  const font = {\n    base: unit * 3,\n    md: unit * 4,\n    lg: unit * 5,\n    xl: unit * 7,\n  };\n\n  const colors = {\n    white: \'#ffffff\',\n    black: \'#000000\',\n    primary: \'#007bff\',\n    textDark: \'#1a1a1a\', \n    textLight: \'#f8f9fa\', \n    sectionBgOverlay: \'rgba(26, 26, 26, 0.85)\', \n    captionBackground: \'rgba(0,0,0,0.5)\',\n  };\n\n  const animation = {\n    fast: 0.3,\n    medium: 0.5,\n    slow: 0.7,\n    defaultFade: 0.5,\n    defaultSlide: 0.7,\n    defaultScale: 0.8,\n  };\n  \n  const zIndex = {\n    background: -10,\n    video: 0,\n    captionBg: 5,\n    captionText: 10, \n    sectionText: 15,\n    logo: 20,\n    contentDefault: 5, \n    overlay: 100,\n  };\n\n  return { width, height, unit, font, colors, animation, zIndex };\n}\n\nfunction slideIn(\n  elementRef: Reference<Txt | Layout | Rect>, \n  duration: number,\n  direction: \'bottom\' | \'top\' | \'left\' | \'right\',\n  theme: ReturnType<typeof useTheme>,\n  distanceMultiplier: number = 0.15,\n) {\n  const initialPos = { x: elementRef().position.x(), y: elementRef().position.y() };\n  const slideDistance = direction === \'bottom\' || direction === \'top\' ? theme.height * distanceMultiplier : theme.width * distanceMultiplier;\n\n  if (direction === \'bottom\') elementRef().position.y(initialPos.y + slideDistance);\n  else if (direction === \'top\') elementRef().position.y(initialPos.y - slideDistance);\n  else if (direction === \'left\') elementRef().position.x(initialPos.x - slideDistance);\n  else if (direction === \'right\') elementRef().position.x(initialPos.x + slideDistance);\n  \n  elementRef().opacity(0);\n\n  yield* all(\n    elementRef().opacity(1, duration, easeOutCubic),\n    (direction === \'bottom\' || direction === \'top\')\n      ? elementRef().position.y(initialPos.y, duration, easeOutCubic)\n      : elementRef().position.x(initialPos.x, duration, easeOutCubic)\n  );\n}\n\nexport default makeScene2D("MixioProDemo", function* (view) {\n  const theme = useTheme();\n\n  // Refs for elements\n  const blurredLogoBgRef = createRef<Img>(); \n  \n  const logoIntroRef = createRef<Img>(); \n  const titleIntroRef = createRef<Txt>(); \n\n  const landingPageTitleTextRef = createRef<Txt>();\n  const landingPageVideoRef = createRef<Video>(); \n  const landingPageCaptionTextRef = createRef<Rect>(); \n\n  const imageGenTitleTextRef = createRef<Txt>(); \n  const imageGenVideoPart1Ref = createRef<Video>(); \n  const imageGenCaptionText1Ref = createRef<Rect>(); \n  const imageGenVideoPart2Ref = createRef<Video>(); \n  const imageGenCaptionText2Ref = createRef<Rect>(); \n  const imageGenVideoPart3Ref = createRef<Video>(); \n  const imageGenCaptionText3Ref = createRef<Rect>(); \n\n  const plannerTitleTextRef = createRef<Txt>(); \n  const plannerVideoRef = createRef<Video>(); \n  const plannerCaptionTextRef = createRef<Rect>(); \n\n  const videoGenTitleTextRef = createRef<Txt>(); \n  const videoGenVideoRef = createRef<Video>(); \n  const revideoDemoRef = createRef<Video>(); \n  const videoGenCaptionTextRef = createRef<Rect>(); \n  \n  const logoOutroRef = createRef<Img>(); \n  const textOutroRef = createRef<Txt>(); \n  // blurredLogoBgOutroRef will reuse blurredLogoBgRef\n\n  const backgroundMusicRef = createRef<Audio>(); \n\n  // --- Global Elements Setup ---\n  view.add(\n    <Img \n      ref={blurredLogoBgRef} // Corresponds to blurredLogoBg and blurredLogoBgOutro\n      src={assets.logoAsset} \n      width={theme.width}\n      height={theme.height}\n      opacity={0} \n      zIndex={theme.zIndex.background}\n      filters={[blur(10)]} \n      alpha={0.3} \n    />\n  );\n  \n  view.add( \n    <Audio ref={backgroundMusicRef} src={assets.backgroundMusicAsset} play={true} loop={true} />\n  );\n\n  // --- Scene 1: Intro (0s - 5s) ---\n  // XML: <scene id="Scene_Intro" start="00:00" end="00:05">\n  view.add(\n    <Img\n      ref={logoIntroRef}\n      src={assets.logoAsset} \n      width={theme.unit * 25}\n      opacity={0}\n      zIndex={theme.zIndex.logo}\n      position={[0, -theme.unit * 5]}\n    />\n  );\n  view.add(\n    <Txt\n      ref={titleIntroRef}\n      text="Mixio Pro"\n      fontSize={theme.font.xl}\n      fontWeight={700}\n      fill={theme.colors.textLight}\n      opacity={0}\n      scale={0.5}\n      zIndex={theme.zIndex.contentDefault}\n      position={[0, theme.unit * 10]}\n      textAlign="center"\n    />\n  );\n\n  yield* blurredLogoBgRef().opacity(1, 1); \n  yield* all(\n    logoIntroRef().opacity(1, 1), \n    titleIntroRef().opacity(1, 1.2), \n    titleIntroRef().scale(1, 1.2, easeOutExpo) \n  );\n  yield* waitFor(5 - 1.2); \n\n  // Transition: Fade out intro elements before next scene\n  yield* all(\n    logoIntroRef().opacity(0, theme.animation.defaultFade),\n    titleIntroRef().opacity(0, theme.animation.defaultFade)\n  );\n  // Total time: 5s\n\n  // --- Scene 2: Landing Page Section (5s - 7s) ---\n  // XML: <scene id="Scene_LandingPageSection" start="00:05" end="00:07"> (2s duration)\n  view.add(\n    <Txt\n      ref={landingPageTitleTextRef}\n      text="Landing Page Showcase"\n      fontSize={theme.font.lg}\n      fontWeight={700}\n      fill={theme.colors.textLight}\n      opacity={0}\n      zIndex={theme.zIndex.sectionText}\n      textAlign="center"\n      position={[0,0]} // Center on screen\n    />\n  );\n  yield* landingPageTitleTextRef().opacity(1, 0.8); // Animation: fadeIn target="landingPageTitleText" duration="0.8s"\n  yield* waitFor(1.2 - 0.8); // Wait until 1.2s from scene start\n  yield* landingPageTitleTextRef().opacity(0, 0.5); // Animation: fadeOut target="landingPageTitleText" duration="0.5s" start="01.2s"\n  yield* waitFor(2 - (0.8 + (1.2 - 0.8) + 0.5)); // Wait for remaining scene duration (2s total)\n  // Total time: 5 + 2 = 7s\n\n  // --- Scene 3: Landing Page (7s - 22s) ---\n  // XML: <scene id="Scene_LandingPage" start="00:07" end="00:22"> (15s duration)\n  view.add(\n    <Video\n      ref={landingPageVideoRef}\n      src={assets.landingPageVideoAsset} \n      width={theme.width * 0.9} \n      height={theme.height * 0.8}\n      opacity={0}\n      zIndex={theme.zIndex.video}\n      radius={theme.unit * 1}\n    />\n  );\n  view.add(\n    <Rect \n      ref={landingPageCaptionTextRef}\n      fill={theme.colors.captionBackground}\n      radius={theme.unit * 0.5}\n      padding={theme.unit}\n      opacity={0}\n      position={[0, theme.height / 2 - theme.unit * 8]} \n      zIndex={theme.zIndex.captionBg}\n      layout \n    >\n      <Txt\n        text="Explore Landing Page Examples"\n        fontSize={theme.font.md}\n        fill={theme.colors.textLight}\n        textAlign="center"\n      />\n    </Rect>\n  );\n\n  (landingPageVideoRef() as any).time(2); // clip-start="00:02"\n  yield* waitFor(0.1); \n  landingPageVideoRef().play();\n  yield* all(\n    landingPageVideoRef().opacity(1, 0.5), // fadeIn target="landingPageVideo" duration="0.5s"\n    slideIn(landingPageCaptionTextRef, 0.7, \'bottom\', theme) // slideIn target="landingPageCaptionText" direction="bottom" duration="0.7s"\n  );\n  // Video clip-end="00:17", so duration is 15s.\n  // Animations start at 0s of this scene. Max duration is 0.7s.\n  // FadeOuts start at 14.5s relative to scene start.\n  yield* waitFor(14.5 - Math.max(0.5, 0.7)); \n  yield* all(\n    landingPageVideoRef().opacity(0, 0.5), // fadeOut target="landingPageVideo" duration="0.5s" start="14.5s"\n    landingPageCaptionTextRef().opacity(0, 0.5) // fadeOut target="landingPageCaptionText" duration="0.5s" start="14.5s"\n  );\n  landingPageVideoRef().pause();\n  yield* waitFor(15 - (14.5 + 0.5)); // Wait for remaining scene duration (15s total)\n  // Total time: 7 + 15 = 22s\n\n  // --- Scene 4: Image Gen Section (22s - 24s) ---\n  // XML: <scene id="Scene_ImageGenSection" start="00:22" end="00:24"> (2s duration)\n  view.add(\n    <Txt\n      ref={imageGenTitleTextRef}\n      text="Image Generation"\n      fontSize={theme.font.lg}\n      fontWeight={700}\n      fill={theme.colors.textLight}\n      opacity={0}\n      zIndex={theme.zIndex.sectionText}\n      textAlign="center"\n      position={[0,0]}\n    />\n  );\n  yield* imageGenTitleTextRef().opacity(1, 0.8); \n  yield* waitFor(1.2 - 0.8); \n  yield* imageGenTitleTextRef().opacity(0, 0.5); \n  yield* waitFor(2 - (0.8 + (1.2 - 0.8) + 0.5)); \n  // Total time: 22 + 2 = 24s\n\n  // --- Scene 5: Image Generation Part 1 (24s - 34s) ---\n  // XML: <scene id="Scene_ImageGeneration_Part1" start="00:24" end="00:34"> (10s duration)\n  view.add(\n    <Video\n      ref={imageGenVideoPart1Ref}\n      src={assets.imageGenVideoAsset} \n      width={theme.width * 0.9}\n      height={theme.height * 0.8}\n      opacity={0}\n      zIndex={theme.zIndex.video}\n      radius={theme.unit * 1}\n    />\n  );\n  view.add(\n    <Rect \n      ref={imageGenCaptionText1Ref}\n      fill={theme.colors.captionBackground}\n      radius={theme.unit * 0.5}\n      padding={theme.unit}\n      opacity={0}\n      position={[0, theme.height / 2 - theme.unit * 8]} \n      zIndex={theme.zIndex.captionBg}\n      layout \n    >\n      <Txt\n        text="Navigating Categories"\n        fontSize={theme.font.md}\n        fill={theme.colors.textLight}\n        textAlign="center"\n      />\n    </Rect>\n  );\n  (imageGenVideoPart1Ref() as any).time(1); // clip-start="00:01"\n  yield* waitFor(0.1);\n  imageGenVideoPart1Ref().play();\n  yield* all(\n    imageGenVideoPart1Ref().opacity(1, 0.5), \n    slideIn(imageGenCaptionText1Ref, 0.7, \'bottom\', theme) \n  );\n  // Video clip-end="00:11", duration 10s.\n  yield* waitFor(9.5 - Math.max(0.5, 0.7)); \n  yield* all(\n    imageGenVideoPart1Ref().opacity(0, 0.5),\n    imageGenCaptionText1Ref().opacity(0, 0.5)\n  );\n  imageGenVideoPart1Ref().pause();\n  yield* waitFor(10 - (9.5 + 0.5));\n  // Total time: 24 + 10 = 34s\n\n  // --- Scene 6: Image Generation Part 2 (34s - 44s) ---\n  // XML: <scene id="Scene_ImageGeneration_Part2" start="00:34" end="00:44"> (10s duration)\n  view.add(\n    <Video\n      ref={imageGenVideoPart2Ref}\n      src={assets.imageGenVideoAsset} \n      width={theme.width * 0.9}\n      height={theme.height * 0.8}\n      opacity={0}\n      zIndex={theme.zIndex.video}\n      radius={theme.unit * 1}\n    />\n  );\n  view.add(\n    <Rect \n      ref={imageGenCaptionText2Ref}\n      fill={theme.colors.captionBackground}\n      radius={theme.unit * 0.5}\n      padding={theme.unit}\n      opacity={0}\n      position={[0, theme.height / 2 - theme.unit * 8]} \n      zIndex={theme.zIndex.captionBg}\n      layout \n    >\n      <Txt\n        text="Adding Text Prompt"\n        fontSize={theme.font.md}\n        fill={theme.colors.textLight}\n        textAlign="center"\n      />\n    </Rect>\n  );\n  (imageGenVideoPart2Ref() as any).time(11); // clip-start="00:11"\n  yield* waitFor(0.1);\n  imageGenVideoPart2Ref().play();\n  yield* all(\n    imageGenVideoPart2Ref().opacity(1, 0.5), \n    slideIn(imageGenCaptionText2Ref, 0.7, \'bottom\', theme) \n  );\n  // Video clip-end="00:21", duration 10s.\n  yield* waitFor(9.5 - Math.max(0.5, 0.7)); \n  yield* all(\n    imageGenVideoPart2Ref().opacity(0, 0.5),\n    imageGenCaptionText2Ref().opacity(0, 0.5)\n  );\n  imageGenVideoPart2Ref().pause();\n  yield* waitFor(10 - (9.5 + 0.5));\n  // Total time: 34 + 10 = 44s\n\n  // --- Scene 7: Image Generation Part 3 (44s - 54s) ---\n  // XML: <scene id="Scene_ImageGeneration_Part3" start="00:44" end="00:54"> (10s duration)\n  view.add(\n    <Video\n      ref={imageGenVideoPart3Ref}\n      src={assets.imageGenVideoAsset} \n      width={theme.width * 0.9}\n      height={theme.height * 0.8}\n      opacity={0}\n      zIndex={theme.zIndex.video}\n      radius={theme.unit * 1}\n    />\n  );\n  view.add(\n    <Rect \n      ref={imageGenCaptionText3Ref}\n      fill={theme.colors.captionBackground}\n      radius={theme.unit * 0.5}\n      padding={theme.unit}\n      opacity={0}\n      position={[0, theme.height / 2 - theme.unit * 8]} \n      zIndex={theme.zIndex.captionBg}\n      layout \n    >\n      <Txt\n        text="Generated Output"\n        fontSize={theme.font.md}\n        fill={theme.colors.textLight}\n        textAlign="center"\n      />\n    </Rect>\n  );\n  (imageGenVideoPart3Ref() as any).time(21); // clip-start="00:21"\n  yield* waitFor(0.1);\n  imageGenVideoPart3Ref().play();\n  yield* all(\n    imageGenVideoPart3Ref().opacity(1, 0.5), \n    slideIn(imageGenCaptionText3Ref, 0.7, \'bottom\', theme) \n  );\n  // Video clip-end="00:31", duration 10s.\n  yield* waitFor(9.5 - Math.max(0.5, 0.7)); \n  yield* all(\n    imageGenVideoPart3Ref().opacity(0, 0.5),\n    imageGenCaptionText3Ref().opacity(0, 0.5)\n  );\n  imageGenVideoPart3Ref().pause();\n  yield* waitFor(10 - (9.5 + 0.5));\n  // Total time: 44 + 10 = 54s\n\n  // --- Scene 8: Planner Section (54s - 56s) ---\n  // XML: <scene id="Scene_PlannerSection" start="00:54" end="00:56"> (2s duration)\n  view.add(\n    <Txt\n      ref={plannerTitleTextRef}\n      text="Content Planner"\n      fontSize={theme.font.lg}\n      fontWeight={700}\n      fill={theme.colors.textLight}\n      opacity={0}\n      zIndex={theme.zIndex.sectionText}\n      textAlign="center"\n      position={[0,0]}\n    />\n  );\n  yield* plannerTitleTextRef().opacity(1, 0.8); \n  yield* waitFor(1.2 - 0.8);\n  yield* plannerTitleTextRef().opacity(0, 0.5); \n  yield* waitFor(2 - (0.8 + (1.2 - 0.8) + 0.5));\n  // Total time: 54 + 2 = 56s\n\n  // --- Scene 9: Content Planner (56s - 1m16s == 76s) ---\n  // XML: <scene id="Scene_ContentPlanner" start="00:56" end="01:16"> (20s duration)\n  view.add(\n    <Video\n      ref={plannerVideoRef}\n      src={assets.plannerVideoAsset} \n      width={theme.width * 0.9}\n      height={theme.height * 0.8}\n      opacity={0}\n      zIndex={theme.zIndex.video}\n      radius={theme.unit * 1}\n    />\n  );\n  view.add(\n    <Rect \n      ref={plannerCaptionTextRef}\n      fill={theme.colors.captionBackground}\n      radius={theme.unit * 0.5}\n      padding={theme.unit}\n      opacity={0}\n      position={[0, theme.height / 2 - theme.unit * 8]} \n      zIndex={theme.zIndex.captionBg}\n      layout \n    >\n      <Txt\n        text="Plan Your Content with Ease"\n        fontSize={theme.font.md}\n        fill={theme.colors.textLight}\n        textAlign="center"\n      />\n    </Rect>\n  );\n  (plannerVideoRef() as any).time(3); // clip-start="00:03"\n  yield* waitFor(0.1);\n  plannerVideoRef().play();\n  yield* all(\n    plannerVideoRef().opacity(1, 0.5), \n    slideIn(plannerCaptionTextRef, 0.7, \'bottom\', theme) \n  );\n  // Video clip-end="00:23", duration 20s.\n  yield* waitFor(19.5 - Math.max(0.5, 0.7)); \n  yield* all(\n    plannerVideoRef().opacity(0, 0.5),\n    plannerCaptionTextRef().opacity(0, 0.5)\n  );\n  plannerVideoRef().pause();\n  yield* waitFor(20 - (19.5 + 0.5));\n  // Total time: 56 + 20 = 76s\n\n  // --- Scene 10: Video Gen Section (1m16s - 1m18s == 76s - 78s) ---\n  // XML: <scene id="Scene_VideoGenSection" start="01:16" end="01:18"> (2s duration)\n  view.add(\n    <Txt\n      ref={videoGenTitleTextRef}\n      text="AI Video Generation"\n      fontSize={theme.font.lg}\n      fontWeight={700}\n      fill={theme.colors.textLight}\n      opacity={0}\n      zIndex={theme.zIndex.sectionText}\n      textAlign="center"\n      position={[0,0]}\n    />\n  );\n  yield* videoGenTitleTextRef().opacity(1, 0.8); \n  yield* waitFor(1.2 - 0.8);\n  yield* videoGenTitleTextRef().opacity(0, 0.5); \n  yield* waitFor(2 - (0.8 + (1.2 - 0.8) + 0.5));\n  // Total time: 76 + 2 = 78s\n\n  // --- Scene 11: Video Generation (1m18s - 1m38s == 78s - 98s) ---\n  // XML: <scene id="Scene_VideoGeneration" start="01:18" end="01:38"> (20s duration)\n  view.add(\n    <Video\n      ref={videoGenVideoRef}\n      src={assets.videoGenVideoAsset} \n      width={theme.width * 0.9}\n      height={theme.height * 0.8}\n      opacity={0}\n      zIndex={theme.zIndex.video}\n      radius={theme.unit * 1}\n    />\n  );\n  view.add(\n    <Video\n      ref={revideoDemoRef}\n      src={assets.revideoDemoAsset} \n      width={theme.width * 0.9}\n      height={theme.height * 0.8}\n      opacity={0}\n      zIndex={theme.zIndex.video} \n      radius={theme.unit * 1}\n    />\n  );\n  view.add(\n    <Rect \n      ref={videoGenCaptionTextRef}\n      fill={theme.colors.captionBackground}\n      radius={theme.unit * 0.5}\n      padding={theme.unit}\n      opacity={0}\n      position={[0, theme.height / 2 - theme.unit * 8]} \n      zIndex={theme.zIndex.captionBg}\n      layout \n    >\n      <Txt\n        text="Generate Videos from Text"\n        fontSize={theme.font.md}\n        fill={theme.colors.textLight}\n        textAlign="center"\n      />\n    </Rect>\n  );\n\n  // videoGenVideo: clip-start="00:02" clip-end="00:10" (8s duration)\n  (videoGenVideoRef() as any).time(2); \n  yield* waitFor(0.1);\n  videoGenVideoRef().play();\n  yield* all(\n    videoGenVideoRef().opacity(1, theme.animation.fast), // fadeIn target="videoGenVideo" duration="0.3s"\n    slideIn(videoGenCaptionTextRef, theme.animation.defaultSlide, \'bottom\', theme) // slideIn target="videoGenCaptionText" direction="bottom" duration="0.7s"\n  );\n  // Wait until 7.7s for videoGenVideo fadeOut\n  yield* waitFor(7.7 - Math.max(theme.animation.fast, theme.animation.defaultSlide)); \n  \n  // fadeOut videoGenVideo at 7.7s (relative to scene start)\n  yield* videoGenVideoRef().opacity(0, theme.animation.fast); // fadeOut target="videoGenVideo" duration="0.3s" start="07.7s"\n  videoGenVideoRef().pause();\n  // videoGenVideo fadeOut finishes at 7.7 + 0.3 = 8.0s\n\n  // fadeIn revideoDemo at 8s (relative to scene start)\n  // revideoDemo: clip-start="00:01", clip-end="00:08" (7s duration)\n  (revideoDemoRef() as any).time(1); \n  yield* waitFor(0.1); // Ensure time is set before play\n  revideoDemoRef().play();\n  yield* revideoDemoRef().opacity(1, theme.animation.fast); // fadeIn target="revideoDemo" duration="0.3s" start="08s"\n  // revideoDemo fadeIn finishes at 8.0 + 0.3 = 8.3s\n  // It plays for 7s. FadeOut starts at 14.5s.\n  // So it\'s visible from 8.3s to 14.5s. Duration = 14.5 - 8.3 = 6.2s.\n  // Total play duration needed = 7s. Animation takes 0.3s.\n  // Wait for (clip_duration - fadeIn_duration) = 7 - 0.3 = 6.7s\n  // Fadeout starts at 14.5s. So it plays fully from 8.3s to 14.5s.\n  yield* waitFor(14.5 - (8.0 + theme.animation.fast)); \n  \n  // fadeOut revideoDemo and caption at 14.5s (relative to scene start)\n  yield* all(\n    revideoDemoRef().opacity(0, theme.animation.defaultFade), // fadeOut target="revideoDemo" duration="0.5s" start="14.5s"\n    videoGenCaptionTextRef().opacity(0, theme.animation.defaultFade) // fadeOut target="videoGenCaptionText" duration="0.5s" start="14.5s"\n  );\n  revideoDemoRef().pause();\n  // FadeOuts finish at 14.5 + 0.5 = 15.0s\n  \n  yield* waitFor(20 - (14.5 + theme.animation.defaultFade)); // Wait for remaining scene duration (20s total)\n  // Total time: 78 + 20 = 98s\n\n  // Fade out background before outro\n  yield* blurredLogoBgRef().opacity(0, theme.animation.medium);\n\n  // --- Scene 12: Outro (1m38s - 1m43s == 98s - 103s) ---\n  // XML: <scene id="Scene_Outro" start="01:38" end="01:43"> (5s duration)\n  view.add(\n    <Img\n      ref={logoOutroRef}\n      src={assets.logoAsset} \n      width={theme.unit * 25}\n      opacity={0}\n      zIndex={theme.zIndex.logo}\n      position={[0, -theme.unit * 5]}\n    />\n  );\n  view.add(\n    <Txt\n      ref={textOutroRef}\n      text="mixio.pro"\n      fontSize={theme.font.xl}\n      fontWeight={700}\n      fill={theme.colors.textLight}\n      opacity={0}\n      scale={0.5}\n      zIndex={theme.zIndex.contentDefault}\n      position={[0, theme.unit * 10]}\n      textAlign="center"\n    />\n  );\n  \n  // fadeIn target="blurredLogoBgOutro" duration="1s"\n  // blurredLogoBgOutroRef reuses blurredLogoBgRef\n  yield* blurredLogoBgRef().opacity(1, 1); \n\n  yield* all(\n    logoOutroRef().opacity(1, 1), \n    textOutroRef().opacity(1, 1.2), \n    textOutroRef().scale(1, 1.2, easeOutExpo) \n  );\n  // Animations finish by 1.2s into this scene.\n  // FadeOuts start at 4.5s into this scene.\n  yield* waitFor(4.5 - 1.2); \n\n  // Final fade out of all elements\n  yield* all(\n    blurredLogoBgRef().opacity(0, theme.animation.medium), // fadeOut target="blurredLogoBgOutro" duration="0.5s" start="04.5s"\n    logoOutroRef().opacity(0, theme.animation.medium), // fadeOut target="logoOutro" duration="0.5s" start="04.5s"\n    textOutroRef().opacity(0, theme.animation.medium) // fadeOut target="textOutro" duration="0.5s" start="04.5s"\n  );\n  // FadeOuts finish at 4.5 + 0.5 = 5.0s. Scene duration is 5s.\n  \n  backgroundMusicRef().pause();\n  yield* waitFor(0.1); // Ensure music pause command is processed\n  // Total time: 98 + 5 = 103s\n});',
};

export const initialStarterCode = `/* @jsxImportSource @revideo/2d/lib */\nimport { makeScene2D, Txt, Rect, Img, Video, Layout, Audio, Node, blur } from "@revideo/2d";\nimport { all, waitFor, createRef, useScene, sequence, chain, delay, Reference, easeOutCubic, easeOutExpo } from "@revideo/core";\n\nconst assets = {\n  logoAsset: \'https://reel-ai-assets.s3.us-west-2.amazonaws.com/29a02986-d1be-40a9-849f-94a9a70072ff%2Fimage%2F01JR8AWWC9M3Y4T7DRGSQFF14E-mixio-pro-logo-removebg-preview.png\',\n  landingPageVideoAsset: \'https://reel-ai-assets.s3.us-west-2.amazonaws.com/29a02986-d1be-40a9-849f-94a9a70072ff%2Fvideo%2F01JV2Q3VMSGQF3PNR4HXRHVK9S-landing-page-showcase.mp4\',\n  imageGenVideoAsset: \'https://reel-ai-assets.s3.us-west-2.amazonaws.com/29a02986-d1be-40a9-849f-94a9a70072ff%2Fvideo%2F01JTW68GXE4XCSK50YQVGGHTY9-image-generation-demo.mp4\',\n  plannerVideoAsset: \'https://reel-ai-assets.s3.us-west-2.amazonaws.com/29a02986-d1be-40a9-849f-94a9a70072ff%2Fvideo%2F01JTW62DJ61W264ZPDFNW8HVFA-planner-result.mp4\',\n  videoGenVideoAsset: \'https://reel-ai-assets.s3.us-west-2.amazonaws.com/29a02986-d1be-40a9-849f-94a9a70072ff%2Fvideo%2F01JTW620Q507XTB3P74ZJ9Z581-image-video-generation-outputs.mp4\',\n  revideoDemoAsset: \'https://reel-ai-assets.s3.us-west-2.amazonaws.com/29a02986-d1be-40a9-849f-94a9a70072ff%2Fvideo%2F01JTW634W3CPPE1WPN5FN8WY79-revideo-demo.mp4\',\n  backgroundMusicAsset: \'https://reel-ai-assets.s3.us-west-2.amazonaws.com/29a02986-d1be-40a9-849f-94a9a70072ff%2Faudio%2F01JTW70TCQHP7VRK2V3GRVE7QQ-dark-mystery-trailer-taking-our-time-131566.mp3\',\n};\n\nfunction useTheme() {\n  const scene = useScene();\n  const size = scene.getSize();\n  const width = size.width;\n  const height = size.height;\n  const unit = width / 100;\n\n  const font = {\n    base: unit * 3,\n    md: unit * 4,\n    lg: unit * 5,\n    xl: unit * 7,\n  };\n\n  const colors = {\n    white: \'#ffffff\',\n    black: \'#000000\',\n    primary: \'#007bff\',\n    textDark: \'#1a1a1a\', \n    textLight: \'#f8f9fa\', \n    sectionBgOverlay: \'rgba(26, 26, 26, 0.85)\', \n    captionBackground: \'rgba(0,0,0,0.5)\',\n  };\n\n  const animation = {\n    fast: 0.3,\n    medium: 0.5,\n    slow: 0.7,\n    defaultFade: 0.5,\n    defaultSlide: 0.7,\n    defaultScale: 0.8,\n  };\n  \n  const zIndex = {\n    background: -10,\n    video: 0,\n    captionBg: 5,\n    captionText: 10, \n    sectionText: 15,\n    logo: 20,\n    contentDefault: 5, \n    overlay: 100,\n  };\n\n  return { width, height, unit, font, colors, animation, zIndex };\n}\n\nfunction slideIn(\n  elementRef: Reference<Txt | Layout | Rect>, \n  duration: number,\n  direction: \'bottom\' | \'top\' | \'left\' | \'right\',\n  theme: ReturnType<typeof useTheme>,\n  distanceMultiplier: number = 0.15,\n) {\n  const initialPos = { x: elementRef().position.x(), y: elementRef().position.y() };\n  const slideDistance = direction === \'bottom\' || direction === \'top\' ? theme.height * distanceMultiplier : theme.width * distanceMultiplier;\n\n  if (direction === \'bottom\') elementRef().position.y(initialPos.y + slideDistance);\n  else if (direction === \'top\') elementRef().position.y(initialPos.y - slideDistance);\n  else if (direction === \'left\') elementRef().position.x(initialPos.x - slideDistance);\n  else if (direction === \'right\') elementRef().position.x(initialPos.x + slideDistance);\n  \n  elementRef().opacity(0);\n\n  yield* all(\n    elementRef().opacity(1, duration, easeOutCubic),\n    (direction === \'bottom\' || direction === \'top\')\n      ? elementRef().position.y(initialPos.y, duration, easeOutCubic)\n      : elementRef().position.x(initialPos.x, duration, easeOutCubic)\n  );\n}\n\nexport default makeScene2D("MixioProDemo", function* (view) {\n  const theme = useTheme();\n\n  // Refs for elements\n  const blurredLogoBgRef = createRef<Img>(); \n  \n  const logoIntroRef = createRef<Img>(); \n  const titleIntroRef = createRef<Txt>(); \n\n  const landingPageTitleTextRef = createRef<Txt>();\n  const landingPageVideoRef = createRef<Video>(); \n  const landingPageCaptionTextRef = createRef<Rect>(); \n\n  const imageGenTitleTextRef = createRef<Txt>(); \n  const imageGenVideoPart1Ref = createRef<Video>(); \n  const imageGenCaptionText1Ref = createRef<Rect>(); \n  const imageGenVideoPart2Ref = createRef<Video>(); \n  const imageGenCaptionText2Ref = createRef<Rect>(); \n  const imageGenVideoPart3Ref = createRef<Video>(); \n  const imageGenCaptionText3Ref = createRef<Rect>(); \n\n  const plannerTitleTextRef = createRef<Txt>(); \n  const plannerVideoRef = createRef<Video>(); \n  const plannerCaptionTextRef = createRef<Rect>(); \n\n  const videoGenTitleTextRef = createRef<Txt>(); \n  const videoGenVideoRef = createRef<Video>(); \n  const revideoDemoRef = createRef<Video>(); \n  const videoGenCaptionTextRef = createRef<Rect>(); \n  \n  const logoOutroRef = createRef<Img>(); \n  const textOutroRef = createRef<Txt>(); \n  // blurredLogoBgOutroRef will reuse blurredLogoBgRef\n\n  const backgroundMusicRef = createRef<Audio>(); \n\n  // --- Global Elements Setup ---\n  view.add(\n    <Img \n      ref={blurredLogoBgRef} // Corresponds to blurredLogoBg and blurredLogoBgOutro\n      src={assets.logoAsset} \n      width={theme.width}\n      height={theme.height}\n      opacity={0} \n      zIndex={theme.zIndex.background}\n      filters={[blur(10)]} \n      alpha={0.3} \n    />\n  );\n  \n  view.add( \n    <Audio ref={backgroundMusicRef} src={assets.backgroundMusicAsset} play={true} loop={true} />\n  );\n\n  // --- Scene 1: Intro (0s - 5s) ---\n  // XML: <scene id="Scene_Intro" start="00:00" end="00:05">\n  view.add(\n    <Img\n      ref={logoIntroRef}\n      src={assets.logoAsset} \n      width={theme.unit * 25}\n      opacity={0}\n      zIndex={theme.zIndex.logo}\n      position={[0, -theme.unit * 5]}\n    />\n  );\n  view.add(\n    <Txt\n      ref={titleIntroRef}\n      text="Mixio Pro"\n      fontSize={theme.font.xl}\n      fontWeight={700}\n      fill={theme.colors.textLight}\n      opacity={0}\n      scale={0.5}\n      zIndex={theme.zIndex.contentDefault}\n      position={[0, theme.unit * 10]}\n      textAlign="center"\n    />\n  );\n\n  yield* blurredLogoBgRef().opacity(1, 1); \n  yield* all(\n    logoIntroRef().opacity(1, 1), \n    titleIntroRef().opacity(1, 1.2), \n    titleIntroRef().scale(1, 1.2, easeOutExpo) \n  );\n  yield* waitFor(5 - 1.2); \n\n  // Transition: Fade out intro elements before next scene\n  yield* all(\n    logoIntroRef().opacity(0, theme.animation.defaultFade),\n    titleIntroRef().opacity(0, theme.animation.defaultFade)\n  );\n  // Total time: 5s\n\n  // --- Scene 2: Landing Page Section (5s - 7s) ---\n  // XML: <scene id="Scene_LandingPageSection" start="00:05" end="00:07"> (2s duration)\n  view.add(\n    <Txt\n      ref={landingPageTitleTextRef}\n      text="Landing Page Showcase"\n      fontSize={theme.font.lg}\n      fontWeight={700}\n      fill={theme.colors.textLight}\n      opacity={0}\n      zIndex={theme.zIndex.sectionText}\n      textAlign="center"\n      position={[0,0]} // Center on screen\n    />\n  );\n  yield* landingPageTitleTextRef().opacity(1, 0.8); // Animation: fadeIn target="landingPageTitleText" duration="0.8s"\n  yield* waitFor(1.2 - 0.8); // Wait until 1.2s from scene start\n  yield* landingPageTitleTextRef().opacity(0, 0.5); // Animation: fadeOut target="landingPageTitleText" duration="0.5s" start="01.2s"\n  yield* waitFor(2 - (0.8 + (1.2 - 0.8) + 0.5)); // Wait for remaining scene duration (2s total)\n  // Total time: 5 + 2 = 7s\n\n  // --- Scene 3: Landing Page (7s - 22s) ---\n  // XML: <scene id="Scene_LandingPage" start="00:07" end="00:22"> (15s duration)\n  view.add(\n    <Video\n      ref={landingPageVideoRef}\n      src={assets.landingPageVideoAsset} \n      width={theme.width * 0.9} \n      height={theme.height * 0.8}\n      opacity={0}\n      zIndex={theme.zIndex.video}\n      radius={theme.unit * 1}\n    />\n  );\n  view.add(\n    <Rect \n      ref={landingPageCaptionTextRef}\n      fill={theme.colors.captionBackground}\n      radius={theme.unit * 0.5}\n      padding={theme.unit}\n      opacity={0}\n      position={[0, theme.height / 2 - theme.unit * 8]} \n      zIndex={theme.zIndex.captionBg}\n      layout \n    >\n      <Txt\n        text="Explore Landing Page Examples"\n        fontSize={theme.font.md}\n        fill={theme.colors.textLight}\n        textAlign="center"\n      />\n    </Rect>\n  );\n\n  (landingPageVideoRef() as any).time(2); // clip-start="00:02"\n  yield* waitFor(0.1); \n  landingPageVideoRef().play();\n  yield* all(\n    landingPageVideoRef().opacity(1, 0.5), // fadeIn target="landingPageVideo" duration="0.5s"\n    slideIn(landingPageCaptionTextRef, 0.7, \'bottom\', theme) // slideIn target="landingPageCaptionText" direction="bottom" duration="0.7s"\n  );\n  // Video clip-end="00:17", so duration is 15s.\n  // Animations start at 0s of this scene. Max duration is 0.7s.\n  // FadeOuts start at 14.5s relative to scene start.\n  yield* waitFor(14.5 - Math.max(0.5, 0.7)); \n  yield* all(\n    landingPageVideoRef().opacity(0, 0.5), // fadeOut target="landingPageVideo" duration="0.5s" start="14.5s"\n    landingPageCaptionTextRef().opacity(0, 0.5) // fadeOut target="landingPageCaptionText" duration="0.5s" start="14.5s"\n  );\n  landingPageVideoRef().pause();\n  yield* waitFor(15 - (14.5 + 0.5)); // Wait for remaining scene duration (15s total)\n  // Total time: 7 + 15 = 22s\n\n  // --- Scene 4: Image Gen Section (22s - 24s) ---\n  // XML: <scene id="Scene_ImageGenSection" start="00:22" end="00:24"> (2s duration)\n  view.add(\n    <Txt\n      ref={imageGenTitleTextRef}\n      text="Image Generation"\n      fontSize={theme.font.lg}\n      fontWeight={700}\n      fill={theme.colors.textLight}\n      opacity={0}\n      zIndex={theme.zIndex.sectionText}\n      textAlign="center"\n      position={[0,0]}\n    />\n  );\n  yield* imageGenTitleTextRef().opacity(1, 0.8); \n  yield* waitFor(1.2 - 0.8); \n  yield* imageGenTitleTextRef().opacity(0, 0.5); \n  yield* waitFor(2 - (0.8 + (1.2 - 0.8) + 0.5)); \n  // Total time: 22 + 2 = 24s\n\n  // --- Scene 5: Image Generation Part 1 (24s - 34s) ---\n  // XML: <scene id="Scene_ImageGeneration_Part1" start="00:24" end="00:34"> (10s duration)\n  view.add(\n    <Video\n      ref={imageGenVideoPart1Ref}\n      src={assets.imageGenVideoAsset} \n      width={theme.width * 0.9}\n      height={theme.height * 0.8}\n      opacity={0}\n      zIndex={theme.zIndex.video}\n      radius={theme.unit * 1}\n    />\n  );\n  view.add(\n    <Rect \n      ref={imageGenCaptionText1Ref}\n      fill={theme.colors.captionBackground}\n      radius={theme.unit * 0.5}\n      padding={theme.unit}\n      opacity={0}\n      position={[0, theme.height / 2 - theme.unit * 8]} \n      zIndex={theme.zIndex.captionBg}\n      layout \n    >\n      <Txt\n        text="Navigating Categories"\n        fontSize={theme.font.md}\n        fill={theme.colors.textLight}\n        textAlign="center"\n      />\n    </Rect>\n  );\n  (imageGenVideoPart1Ref() as any).time(1); // clip-start="00:01"\n  yield* waitFor(0.1);\n  imageGenVideoPart1Ref().play();\n  yield* all(\n    imageGenVideoPart1Ref().opacity(1, 0.5), \n    slideIn(imageGenCaptionText1Ref, 0.7, \'bottom\', theme) \n  );\n  // Video clip-end="00:11", duration 10s.\n  yield* waitFor(9.5 - Math.max(0.5, 0.7)); \n  yield* all(\n    imageGenVideoPart1Ref().opacity(0, 0.5),\n    imageGenCaptionText1Ref().opacity(0, 0.5)\n  );\n  imageGenVideoPart1Ref().pause();\n  yield* waitFor(10 - (9.5 + 0.5));\n  // Total time: 24 + 10 = 34s\n\n  // --- Scene 6: Image Generation Part 2 (34s - 44s) ---\n  // XML: <scene id="Scene_ImageGeneration_Part2" start="00:34" end="00:44"> (10s duration)\n  view.add(\n    <Video\n      ref={imageGenVideoPart2Ref}\n      src={assets.imageGenVideoAsset} \n      width={theme.width * 0.9}\n      height={theme.height * 0.8}\n      opacity={0}\n      zIndex={theme.zIndex.video}\n      radius={theme.unit * 1}\n    />\n  );\n  view.add(\n    <Rect \n      ref={imageGenCaptionText2Ref}\n      fill={theme.colors.captionBackground}\n      radius={theme.unit * 0.5}\n      padding={theme.unit}\n      opacity={0}\n      position={[0, theme.height / 2 - theme.unit * 8]} \n      zIndex={theme.zIndex.captionBg}\n      layout \n    >\n      <Txt\n        text="Adding Text Prompt"\n        fontSize={theme.font.md}\n        fill={theme.colors.textLight}\n        textAlign="center"\n      />\n    </Rect>\n  );\n  (imageGenVideoPart2Ref() as any).time(11); // clip-start="00:11"\n  yield* waitFor(0.1);\n  imageGenVideoPart2Ref().play();\n  yield* all(\n    imageGenVideoPart2Ref().opacity(1, 0.5), \n    slideIn(imageGenCaptionText2Ref, 0.7, \'bottom\', theme) \n  );\n  // Video clip-end="00:21", duration 10s.\n  yield* waitFor(9.5 - Math.max(0.5, 0.7)); \n  yield* all(\n    imageGenVideoPart2Ref().opacity(0, 0.5),\n    imageGenCaptionText2Ref().opacity(0, 0.5)\n  );\n  imageGenVideoPart2Ref().pause();\n  yield* waitFor(10 - (9.5 + 0.5));\n  // Total time: 34 + 10 = 44s\n\n  // --- Scene 7: Image Generation Part 3 (44s - 54s) ---\n  // XML: <scene id="Scene_ImageGeneration_Part3" start="00:44" end="00:54"> (10s duration)\n  view.add(\n    <Video\n      ref={imageGenVideoPart3Ref}\n      src={assets.imageGenVideoAsset} \n      width={theme.width * 0.9}\n      height={theme.height * 0.8}\n      opacity={0}\n      zIndex={theme.zIndex.video}\n      radius={theme.unit * 1}\n    />\n  );\n  view.add(\n    <Rect \n      ref={imageGenCaptionText3Ref}\n      fill={theme.colors.captionBackground}\n      radius={theme.unit * 0.5}\n      padding={theme.unit}\n      opacity={0}\n      position={[0, theme.height / 2 - theme.unit * 8]} \n      zIndex={theme.zIndex.captionBg}\n      layout \n    >\n      <Txt\n        text="Generated Output"\n        fontSize={theme.font.md}\n        fill={theme.colors.textLight}\n        textAlign="center"\n      />\n    </Rect>\n  );\n  (imageGenVideoPart3Ref() as any).time(21); // clip-start="00:21"\n  yield* waitFor(0.1);\n  imageGenVideoPart3Ref().play();\n  yield* all(\n    imageGenVideoPart3Ref().opacity(1, 0.5), \n    slideIn(imageGenCaptionText3Ref, 0.7, \'bottom\', theme) \n  );\n  // Video clip-end="00:31", duration 10s.\n  yield* waitFor(9.5 - Math.max(0.5, 0.7)); \n  yield* all(\n    imageGenVideoPart3Ref().opacity(0, 0.5),\n    imageGenCaptionText3Ref().opacity(0, 0.5)\n  );\n  imageGenVideoPart3Ref().pause();\n  yield* waitFor(10 - (9.5 + 0.5));\n  // Total time: 44 + 10 = 54s\n\n  // --- Scene 8: Planner Section (54s - 56s) ---\n  // XML: <scene id="Scene_PlannerSection" start="00:54" end="00:56"> (2s duration)\n  view.add(\n    <Txt\n      ref={plannerTitleTextRef}\n      text="Content Planner"\n      fontSize={theme.font.lg}\n      fontWeight={700}\n      fill={theme.colors.textLight}\n      opacity={0}\n      zIndex={theme.zIndex.sectionText}\n      textAlign="center"\n      position={[0,0]}\n    />\n  );\n  yield* plannerTitleTextRef().opacity(1, 0.8); \n  yield* waitFor(1.2 - 0.8);\n  yield* plannerTitleTextRef().opacity(0, 0.5); \n  yield* waitFor(2 - (0.8 + (1.2 - 0.8) + 0.5));\n  // Total time: 54 + 2 = 56s\n\n  // --- Scene 9: Content Planner (56s - 1m16s == 76s) ---\n  // XML: <scene id="Scene_ContentPlanner" start="00:56" end="01:16"> (20s duration)\n  view.add(\n    <Video\n      ref={plannerVideoRef}\n      src={assets.plannerVideoAsset} \n      width={theme.width * 0.9}\n      height={theme.height * 0.8}\n      opacity={0}\n      zIndex={theme.zIndex.video}\n      radius={theme.unit * 1}\n    />\n  );\n  view.add(\n    <Rect \n      ref={plannerCaptionTextRef}\n      fill={theme.colors.captionBackground}\n      radius={theme.unit * 0.5}\n      padding={theme.unit}\n      opacity={0}\n      position={[0, theme.height / 2 - theme.unit * 8]} \n      zIndex={theme.zIndex.captionBg}\n      layout \n    >\n      <Txt\n        text="Plan Your Content with Ease"\n        fontSize={theme.font.md}\n        fill={theme.colors.textLight}\n        textAlign="center"\n      />\n    </Rect>\n  );\n  (plannerVideoRef() as any).time(3); // clip-start="00:03"\n  yield* waitFor(0.1);\n  plannerVideoRef().play();\n  yield* all(\n    plannerVideoRef().opacity(1, 0.5), \n    slideIn(plannerCaptionTextRef, 0.7, \'bottom\', theme) \n  );\n  // Video clip-end="00:23", duration 20s.\n  yield* waitFor(19.5 - Math.max(0.5, 0.7)); \n  yield* all(\n    plannerVideoRef().opacity(0, 0.5),\n    plannerCaptionTextRef().opacity(0, 0.5)\n  );\n  plannerVideoRef().pause();\n  yield* waitFor(20 - (19.5 + 0.5));\n  // Total time: 56 + 20 = 76s\n\n  // --- Scene 10: Video Gen Section (1m16s - 1m18s == 76s - 78s) ---\n  // XML: <scene id="Scene_VideoGenSection" start="01:16" end="01:18"> (2s duration)\n  view.add(\n    <Txt\n      ref={videoGenTitleTextRef}\n      text="AI Video Generation"\n      fontSize={theme.font.lg}\n      fontWeight={700}\n      fill={theme.colors.textLight}\n      opacity={0}\n      zIndex={theme.zIndex.sectionText}\n      textAlign="center"\n      position={[0,0]}\n    />\n  );\n  yield* videoGenTitleTextRef().opacity(1, 0.8); \n  yield* waitFor(1.2 - 0.8);\n  yield* videoGenTitleTextRef().opacity(0, 0.5); \n  yield* waitFor(2 - (0.8 + (1.2 - 0.8) + 0.5));\n  // Total time: 76 + 2 = 78s\n\n  // --- Scene 11: Video Generation (1m18s - 1m38s == 78s - 98s) ---\n  // XML: <scene id="Scene_VideoGeneration" start="01:18" end="01:38"> (20s duration)\n  view.add(\n    <Video\n      ref={videoGenVideoRef}\n      src={assets.videoGenVideoAsset} \n      width={theme.width * 0.9}\n      height={theme.height * 0.8}\n      opacity={0}\n      zIndex={theme.zIndex.video}\n      radius={theme.unit * 1}\n    />\n  );\n  view.add(\n    <Video\n      ref={revideoDemoRef}\n      src={assets.revideoDemoAsset} \n      width={theme.width * 0.9}\n      height={theme.height * 0.8}\n      opacity={0}\n      zIndex={theme.zIndex.video} \n      radius={theme.unit * 1}\n    />\n  );\n  view.add(\n    <Rect \n      ref={videoGenCaptionTextRef}\n      fill={theme.colors.captionBackground}\n      radius={theme.unit * 0.5}\n      padding={theme.unit}\n      opacity={0}\n      position={[0, theme.height / 2 - theme.unit * 8]} \n      zIndex={theme.zIndex.captionBg}\n      layout \n    >\n      <Txt\n        text="Generate Videos from Text"\n        fontSize={theme.font.md}\n        fill={theme.colors.textLight}\n        textAlign="center"\n      />\n    </Rect>\n  );\n\n  // videoGenVideo: clip-start="00:02" clip-end="00:10" (8s duration)\n  (videoGenVideoRef() as any).time(2); \n  yield* waitFor(0.1);\n  videoGenVideoRef().play();\n  yield* all(\n    videoGenVideoRef().opacity(1, theme.animation.fast), // fadeIn target="videoGenVideo" duration="0.3s"\n    slideIn(videoGenCaptionTextRef, theme.animation.defaultSlide, \'bottom\', theme) // slideIn target="videoGenCaptionText" direction="bottom" duration="0.7s"\n  );\n  // Wait until 7.7s for videoGenVideo fadeOut\n  yield* waitFor(7.7 - Math.max(theme.animation.fast, theme.animation.defaultSlide)); \n  \n  // fadeOut videoGenVideo at 7.7s (relative to scene start)\n  yield* videoGenVideoRef().opacity(0, theme.animation.fast); // fadeOut target="videoGenVideo" duration="0.3s" start="07.7s"\n  videoGenVideoRef().pause();\n  // videoGenVideo fadeOut finishes at 7.7 + 0.3 = 8.0s\n\n  // fadeIn revideoDemo at 8s (relative to scene start)\n  // revideoDemo: clip-start="00:01", clip-end="00:08" (7s duration)\n  (revideoDemoRef() as any).time(1); \n  yield* waitFor(0.1); // Ensure time is set before play\n  revideoDemoRef().play();\n  yield* revideoDemoRef().opacity(1, theme.animation.fast); // fadeIn target="revideoDemo" duration="0.3s" start="08s"\n  // revideoDemo fadeIn finishes at 8.0 + 0.3 = 8.3s\n  // It plays for 7s. FadeOut starts at 14.5s.\n  // So it\'s visible from 8.3s to 14.5s. Duration = 14.5 - 8.3 = 6.2s.\n  // Total play duration needed = 7s. Animation takes 0.3s.\n  // Wait for (clip_duration - fadeIn_duration) = 7 - 0.3 = 6.7s\n  // Fadeout starts at 14.5s. So it plays fully from 8.3s to 14.5s.\n  yield* waitFor(14.5 - (8.0 + theme.animation.fast)); \n  \n  // fadeOut revideoDemo and caption at 14.5s (relative to scene start)\n  yield* all(\n    revideoDemoRef().opacity(0, theme.animation.defaultFade), // fadeOut target="revideoDemo" duration="0.5s" start="14.5s"\n    videoGenCaptionTextRef().opacity(0, theme.animation.defaultFade) // fadeOut target="videoGenCaptionText" duration="0.5s" start="14.5s"\n  );\n  revideoDemoRef().pause();\n  // FadeOuts finish at 14.5 + 0.5 = 15.0s\n  \n  yield* waitFor(20 - (14.5 + theme.animation.defaultFade)); // Wait for remaining scene duration (20s total)\n  // Total time: 78 + 20 = 98s\n\n  // Fade out background before outro\n  yield* blurredLogoBgRef().opacity(0, theme.animation.medium);\n\n  // --- Scene 12: Outro (1m38s - 1m43s == 98s - 103s) ---\n  // XML: <scene id="Scene_Outro" start="01:38" end="01:43"> (5s duration)\n  view.add(\n    <Img\n      ref={logoOutroRef}\n      src={assets.logoAsset} \n      width={theme.unit * 25}\n      opacity={0}\n      zIndex={theme.zIndex.logo}\n      position={[0, -theme.unit * 5]}\n    />\n  );\n  view.add(\n    <Txt\n      ref={textOutroRef}\n      text="mixio.pro"\n      fontSize={theme.font.xl}\n      fontWeight={700}\n      fill={theme.colors.textLight}\n      opacity={0}\n      scale={0.5}\n      zIndex={theme.zIndex.contentDefault}\n      position={[0, theme.unit * 10]}\n      textAlign="center"\n    />\n  );\n  \n  // fadeIn target="blurredLogoBgOutro" duration="1s"\n  // blurredLogoBgOutroRef reuses blurredLogoBgRef\n  yield* blurredLogoBgRef().opacity(1, 1); \n\n  yield* all(\n    logoOutroRef().opacity(1, 1), \n    textOutroRef().opacity(1, 1.2), \n    textOutroRef().scale(1, 1.2, easeOutExpo) \n  );\n  // Animations finish by 1.2s into this scene.\n  // FadeOuts start at 4.5s into this scene.\n  yield* waitFor(4.5 - 1.2); \n\n  // Final fade out of all elements\n  yield* all(\n    blurredLogoBgRef().opacity(0, theme.animation.medium), // fadeOut target="blurredLogoBgOutro" duration="0.5s" start="04.5s"\n    logoOutroRef().opacity(0, theme.animation.medium), // fadeOut target="logoOutro" duration="0.5s" start="04.5s"\n    textOutroRef().opacity(0, theme.animation.medium) // fadeOut target="textOutro" duration="0.5s" start="04.5s"\n  );\n  // FadeOuts finish at 4.5 + 0.5 = 5.0s. Scene duration is 5s.\n  \n  backgroundMusicRef().pause();\n  yield* waitFor(0.1); // Ensure music pause command is processed\n  // Total time: 98 + 5 = 103s\n});`;
